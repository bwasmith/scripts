#!/bin/bash

# Util vars
COLOR_RED=$(tput setaf 1)
COLOR_GREEN=$(tput setaf 2)
COLOR_BLUE=$(tput setaf 4)
COLOR_WHITE=$(tput setaf 7)
COLOR_NORMAL=$(tput sgr0)
COL_POS=80

# AWS vars
AWS_DIRECTORY=~/.aws
AWS_SESSION_DATA=""
AWS_MFA_SERIAL_NUMBER_FILE=~/.aws/mfa_serial_number
AWS_MFA_SESSION_FILE=~/.aws/mfa_session
AWS_ACCOUNT_ID="157595281681"
IS_AWS_CLI_INSTALLED="0"
AWS_TOKEN_TTL=129600
AWS_FORCE_TOKEN=0

function get_input_data()
{
    local _resultvar=$2
    local usr_input=""

    while [ -z "${usr_input}" ]
    do
        printf "${COLOR_WHITE}${1}${COLOR_NORMAL}"
        read usr_input
    done

    eval ${_resultvar}="'${usr_input}'"
}

function pause()
{
    printf "${COLOR_WHITE}Press any key to continue...${COLOR_NORMAL}"
    read usr_input
}

function print_fail()
{
    let colPos=${COL_POS}-${#1}
    printf '%s%s%*s%s' "${1}" "${COLOR_RED}" $colPos " ☠️  " "${COLOR_NORMAL}"
    echo ""
}

function print_success()
{
    let colPos=${COL_POS}-${#1}
    printf '%s%s%*s%s' "${1}" "${COLOR_GREEN}" $colPos " 👍🏼" "${COLOR_NORMAL}"
    echo ""
}

function aws_print_logo ()
{
    clear
    echo ""
    echo ""
    echo " █████╗ ██╗    ██╗███████╗       ██████╗██╗     ██╗"
    echo "██╔══██╗██║    ██║██╔════╝      ██╔════╝██║     ██║"
    echo "███████║██║ █╗ ██║███████╗█████╗██║     ██║     ██║"
    echo "██╔══██║██║███╗██║╚════██║╚════╝██║     ██║     ██║"
    echo "██║  ██║╚███╔███╔╝███████║      ╚██████╗███████╗██║"
    echo "╚═╝  ╚═╝ ╚══╝╚══╝ ╚══════╝       ╚═════╝╚══════╝╚═╝"
    echo "                                                   "
    echo ""
    echo "Amazon Web Services - CLI"
    echo ""
}

function aws_is_aws_cli_installed ()
{
    local _resultvar=$1
    isFail=1

    awscliVer="$(aws 2>&1)"
    if [[ "${awscliVer}" =~ "aws help" ]]; then
        print_success " - AWS Tool Installed"
    else
        print_fail " - AWS Tool Installed"
        isFail=0
    fi
    eval "${_resultvar}"="'${isFail}'"
}


function aws_configure_mfa_serial ()
{
    local _AWS_USERNAME=""

    if [ ! -f ${AWS_MFA_SERIAL_NUMBER_FILE} ]; then
        echo "Looks like this computer does not know what your AWS MFA serial is."
        echo ""
        get_input_data "Enter your AWS username: " _AWS_USERNAME
        AWS_MFA_SERIAL="arn:aws:iam::${AWS_ACCOUNT_ID}:mfa/${_AWS_USERNAME}"
        echo ""
        echo "Your MFA serial number is: ${COLOR_BLUE}${AWS_MFA_SERIAL}${COLOR_NORMAL}"
        echo ""

        if [ ! -d ${AWS_DIRECTORY} ]; then
            mkdir -p ${AWS_DIRECTORY}
        fi

        echo "export AWS_MFA_SERIAL=\"${AWS_MFA_SERIAL}\"" > ${AWS_MFA_SERIAL_NUMBER_FILE}
    else
        source ${AWS_MFA_SERIAL_NUMBER_FILE}
    fi
}

function get_json_value ()
{
    local _idx=$1
    local _resultVar=$2
    local _jsonValue=""

    _jsonValue=$(echo ${AWS_SESSION_DATA} |grep -oiE "${_idx}\": \"[^\"]*" |sed "s/${_idx}\": \"\([^\"]*\)/\1/")
    eval "${_resultVar}"="'${_jsonValue}'"
}

function aws_mfa_authenticate ()
{
    if [ ${AWS_FORCE_TOKEN} == 1 ]; then
        echo ""
        echo "${COLOR_RED}>> Reseting previous token <<${COLOR_NORMAL}"
        echo ""
        rm -f ${AWS_MFA_SESSION_FILE}
    fi

    AWS_SESSION_TTL=0
    local _CURRENT_TIMESTAMP=$(date "+%s")
    if [ -e ${AWS_MFA_SESSION_FILE} ]; then
        source ${AWS_MFA_SESSION_FILE}
    fi

    local _diff=0
    _diff=$(expr ${AWS_SESSION_TTL} - ${_CURRENT_TIMESTAMP})
    if [ ${_diff} -ge 60 ]; then
        echo "AWS session still valid for ${_diff} seconds, no need to authenticate"
        echo ""
        return
    fi

    echo ""
    echo "${COLOR_WHITE}Step 1. Checking dependencies${COLOR_NORMAL}"
    echo ""
    aws_is_aws_cli_installed IS_AWS_INSTALLED
    if [ "${IS_AWS_INSTALLED}" == "0" ]; then
        echo "AWS CLI is not installed"
        echo ""
        echo "  Go to: https://docs.aws.amazon.com/cli/latest/userguide/installing.html for more info"
        echo ""
        echo "If using MAC, do: ${COLOR_WHITE}brew install awscli${COLOR_NORMAL}"
        echo ""
        exit 1
        return
    fi

    jqtoolVer="$(jq -h 2>&1)"
    if [[ "${jqtoolVer}" =~ "commandline JSON processor" ]]; then
        print_success " - JQ Utility Installed"
    else
        print_fail " - JQ Utility Installed"
        isFail=0

        echo "To install JQ utility do: "
        echo "${COLOR_WHITE}brew install jq${COLOR_NORMAL}"
        echo ""
    fi

    echo ""
    echo "${COLOR_WHITE}Step 2. Getting MFA Serial${COLOR_NORMAL}"
    echo ""
    aws_configure_mfa_serial

    if [ "${AWS_MFA_SERIAL}" == "" ]; then
        print_fail "Invalid MFA Serial or empty, cannot continue"
        return
    fi

    echo ""
    echo "${COLOR_WHITE}Step 3. Cleaning up previous session data${COLOR_NORMAL}"
    echo ""

    # Cleanup previous session
    cat /dev/null > ${AWS_MFA_SESSION_FILE}

    unset AWS_ACCESS_KEY_ID
    unset AWS_SECRET_ACCESS_KEY
    unset AWS_SESSION_TOKEN
    unset AWS_SESSION_EXPIRATION
    unset AWS_SESSION_TTL

    echo ""
    echo "${COLOR_WHITE}Step 4. Authenticating${COLOR_NORMAL}"
    echo "  MFA ARN: ${AWS_MFA_SERIAL}"
    echo ""
    echo ""
    get_input_data "Enter your Multi-Factor Authentication value: " AWS_MFA_VALUE

    AWS_SESSION_DATA=$(aws sts get-session-token --duration-seconds ${AWS_TOKEN_TTL} --serial-number ${AWS_MFA_SERIAL}  --token-code ${AWS_MFA_VALUE} 2>&1)
    echo "aws sts get-session-token --duration-seconds ${AWS_TOKEN_TTL} --serial-number ${AWS_MFA_SERIAL}  --token-code ${AWS_MFA_VALUE}"

    echo ""
    echo "${COLOR_WHITE}Step 5. Validating AWS response${COLOR_NORMAL}"
    echo ""
    if [[ ! "${AWS_SESSION_DATA}" =~ "SecretAccessKey" ]]; then
        echo "${COLOR_RED}Error${COLOR_NORMAL} Unable to authenticate with AWS"
        echo "AWS Response: ${AWS_SESSION_DATA}"
        echo ""
        echo "${COLOR_BLUE} >>> Unable to continue <<< ${COLOR_NORMAL}"
        echo ""
        exit 1
    fi

    echo ""
    echo "${COLOR_WHITE}Done! You've succesfully authenticated agains AWS for a period of 36 hours (129,600 seconds)${COLOR_NORMAL}"
    echo ""

    get_json_value "AccessKeyId" AWS_ACCESS_KEY_ID
    get_json_value "SecretAccessKey" AWS_SECRET_ACCESS_KEY
    get_json_value "SessionToken" AWS_SESSION_TOKEN
    get_json_value "Expiration" AWS_SESSION_EXPIRATION
    if $(date -j -u -f "%Y-%m-%dT%TZ" "${AWS_SESSION_EXPIRATION}" "+%s") ; then
      AWS_SESSION_TTL=$(date -j -u -f "%Y-%m-%dT%TZ" "${AWS_SESSION_EXPIRATION}" "+%s")
    else
      AWS_SESSION_TTL=$(date -j -u -f "%Y-%m-%dT%T" "${AWS_SESSION_EXPIRATION}" "+%s")
    fi

    echo "export AWS_ACCESS_KEY_ID=\"${AWS_ACCESS_KEY_ID}\"" > ${AWS_MFA_SESSION_FILE}
    echo "export AWS_SECRET_ACCESS_KEY=\"${AWS_SECRET_ACCESS_KEY}\"" >> ${AWS_MFA_SESSION_FILE}
    echo "export AWS_SESSION_TOKEN=\"${AWS_SESSION_TOKEN}\"" >> ${AWS_MFA_SESSION_FILE}
    echo "export AWS_SESSION_EXPIRATION=\"${AWS_SESSION_EXPIRATION}\"" >> ${AWS_MFA_SESSION_FILE}
    echo "export AWS_SESSION_TTL=${AWS_SESSION_TTL}" >> ${AWS_MFA_SESSION_FILE}
    source ${AWS_MFA_SESSION_FILE}

    if [[ ! $(grep "${AWS_MFA_SESSION_FILE}" ~/.bash_profile) ]]; then
        echo "source ${AWS_MFA_SESSION_FILE}" >> ~/.bash_profile
    fi
    if [[ ! $(grep "${AWS_MFA_SESSION_FILE}" ~/.zshrc) ]]; then
        echo "[ -s ${AWS_MFA_SESSION_FILE} ] && source ${AWS_MFA_SESSION_FILE}" >> ~/.zshrc
    fi

    if [ -n "`$SHELL -c 'echo $ZSH_VERSION'`" ]; then
        exec zsh
    fi
}

aws_print_logo

while getopts f OPTIONPARAM
do
    case "${OPTIONPARAM}" in
        f)
            AWS_FORCE_TOKEN=1
            ;;
    esac
done

aws_mfa_authenticate
